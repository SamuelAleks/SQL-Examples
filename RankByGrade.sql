set schema U_ALEKS;

SELECT * FROM DB_BOOK.GRADE_PERCENT;
SELECT * FROM DB_BOOK.TAKES;
SELECT * from DB_BOOK.STUDENT;

-- COMBINES PERCENT WITH GRADE
CREATE VIEW V1 AS SELECT
    T.ID,
    T.COURSE_ID,
    G.PERCENT
    FROM DB_BOOK.TAKES T JOIN DB_BOOK.GRADE_PERCENT G
    on T.GRADE = G.GRADE;
SELECT * FROM V1;

-- COMBINES NAME WITH ID
CREATE VIEW V2 AS SELECT
    S.NAME,
    V.COURSE_ID,
    V.PERCENT
    FROM DB_BOOK.STUDENT S JOIN V1 V
    on S.ID = V.ID;
SELECT * FROM V2; 

-- CALCULATES AVERAGE
CREATE VIEW AVERAGE AS
SELECT V2.NAME AS NAME, AVG(V2.PERCENT) as AVERAGE_PERCENT
FROM V2
GROUP BY NAME;
SELECT * FROM AVERAGE; 

-- CALCULATES CLASS COUNT
CREATE VIEW CLASS_COUNT AS 
SELECT V2.NAME AS NAME, count(V2.COURSE_ID) AS COURSE_COUNT FROM V2 GROUP BY NAME;
SELECT * FROM CLASS_COUNT;

-- COMBINED AVERAGE AND CLASS COUNT WITH 10 OR MORE CLASSES
CREATE VIEW COMBINED AS SELECT
    AVERAGE.NAME AS NAME, AVERAGE.AVERAGE_PERCENT AS AVERAGE_PERCENT, CLASS_COUNT.COURSE_COUNT FROM AVERAGE, CLASS_COUNT WHERE AVERAGE.NAME = CLASS_COUNT.NAME EXCEPT 
    (SELECT AVERAGE.NAME AS NAME, AVERAGE.AVERAGE_PERCENT AS AVERAGE_PERCENT, CLASS_COUNT.COURSE_COUNT FROM AVERAGE, CLASS_COUNT WHERE CLASS_COUNT.COURSE_COUNT < 10);
SELECT * FROM COMBINED;

    
    -- FINAL SELECT STATEMENT WITH ALL REQUIREMENTS FULFILLED
SELECT c.NAME,c.AVERAGE_PERCENT, c.COURSE_COUNT, RANK() OVER(ORDER BY c.AVERAGE_PERCENT DESC) AS rank From COMBINED c; 
